// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: documents/custom.proto

package documents

import (
	context "context"
	idl_common "github.com/krafton-hq/red-fox/apis/idl_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomDocumentServerClient is the client API for CustomDocumentServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomDocumentServerClient interface {
	GetCustomDocument(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetCustomDocumentRes, error)
	ListCustomDocuments(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListCustomDocumentsRes, error)
	CreateCustomDocument(ctx context.Context, in *DesiredCustomDocumentReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	UpdateCustomDocument(ctx context.Context, in *DesiredCustomDocumentReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	DeleteCustomDocument(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
}

type customDocumentServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomDocumentServerClient(cc grpc.ClientConnInterface) CustomDocumentServerClient {
	return &customDocumentServerClient{cc}
}

func (c *customDocumentServerClient) GetCustomDocument(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetCustomDocumentRes, error) {
	out := new(GetCustomDocumentRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.CustomDocumentServer/GetCustomDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDocumentServerClient) ListCustomDocuments(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListCustomDocumentsRes, error) {
	out := new(ListCustomDocumentsRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.CustomDocumentServer/ListCustomDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDocumentServerClient) CreateCustomDocument(ctx context.Context, in *DesiredCustomDocumentReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.CustomDocumentServer/CreateCustomDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDocumentServerClient) UpdateCustomDocument(ctx context.Context, in *DesiredCustomDocumentReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.CustomDocumentServer/UpdateCustomDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDocumentServerClient) DeleteCustomDocument(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.CustomDocumentServer/DeleteCustomDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDocumentServerServer is the server API for CustomDocumentServer service.
// All implementations must embed UnimplementedCustomDocumentServerServer
// for forward compatibility
type CustomDocumentServerServer interface {
	GetCustomDocument(context.Context, *idl_common.SingleObjectReq) (*GetCustomDocumentRes, error)
	ListCustomDocuments(context.Context, *idl_common.ListObjectReq) (*ListCustomDocumentsRes, error)
	CreateCustomDocument(context.Context, *DesiredCustomDocumentReq) (*idl_common.CommonRes, error)
	UpdateCustomDocument(context.Context, *DesiredCustomDocumentReq) (*idl_common.CommonRes, error)
	DeleteCustomDocument(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error)
	mustEmbedUnimplementedCustomDocumentServerServer()
}

// UnimplementedCustomDocumentServerServer must be embedded to have forward compatible implementations.
type UnimplementedCustomDocumentServerServer struct {
}

func (UnimplementedCustomDocumentServerServer) GetCustomDocument(context.Context, *idl_common.SingleObjectReq) (*GetCustomDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDocument not implemented")
}
func (UnimplementedCustomDocumentServerServer) ListCustomDocuments(context.Context, *idl_common.ListObjectReq) (*ListCustomDocumentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomDocuments not implemented")
}
func (UnimplementedCustomDocumentServerServer) CreateCustomDocument(context.Context, *DesiredCustomDocumentReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomDocument not implemented")
}
func (UnimplementedCustomDocumentServerServer) UpdateCustomDocument(context.Context, *DesiredCustomDocumentReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomDocument not implemented")
}
func (UnimplementedCustomDocumentServerServer) DeleteCustomDocument(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomDocument not implemented")
}
func (UnimplementedCustomDocumentServerServer) mustEmbedUnimplementedCustomDocumentServerServer() {}

// UnsafeCustomDocumentServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomDocumentServerServer will
// result in compilation errors.
type UnsafeCustomDocumentServerServer interface {
	mustEmbedUnimplementedCustomDocumentServerServer()
}

func RegisterCustomDocumentServerServer(s grpc.ServiceRegistrar, srv CustomDocumentServerServer) {
	s.RegisterService(&CustomDocumentServer_ServiceDesc, srv)
}

func _CustomDocumentServer_GetCustomDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDocumentServerServer).GetCustomDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.CustomDocumentServer/GetCustomDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDocumentServerServer).GetCustomDocument(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDocumentServer_ListCustomDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.ListObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDocumentServerServer).ListCustomDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.CustomDocumentServer/ListCustomDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDocumentServerServer).ListCustomDocuments(ctx, req.(*idl_common.ListObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDocumentServer_CreateCustomDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredCustomDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDocumentServerServer).CreateCustomDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.CustomDocumentServer/CreateCustomDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDocumentServerServer).CreateCustomDocument(ctx, req.(*DesiredCustomDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDocumentServer_UpdateCustomDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredCustomDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDocumentServerServer).UpdateCustomDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.CustomDocumentServer/UpdateCustomDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDocumentServerServer).UpdateCustomDocument(ctx, req.(*DesiredCustomDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDocumentServer_DeleteCustomDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDocumentServerServer).DeleteCustomDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.CustomDocumentServer/DeleteCustomDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDocumentServerServer).DeleteCustomDocument(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomDocumentServer_ServiceDesc is the grpc.ServiceDesc for CustomDocumentServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomDocumentServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redfox.api.documents.CustomDocumentServer",
	HandlerType: (*CustomDocumentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomDocument",
			Handler:    _CustomDocumentServer_GetCustomDocument_Handler,
		},
		{
			MethodName: "ListCustomDocuments",
			Handler:    _CustomDocumentServer_ListCustomDocuments_Handler,
		},
		{
			MethodName: "CreateCustomDocument",
			Handler:    _CustomDocumentServer_CreateCustomDocument_Handler,
		},
		{
			MethodName: "UpdateCustomDocument",
			Handler:    _CustomDocumentServer_UpdateCustomDocument_Handler,
		},
		{
			MethodName: "DeleteCustomDocument",
			Handler:    _CustomDocumentServer_DeleteCustomDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/custom.proto",
}
