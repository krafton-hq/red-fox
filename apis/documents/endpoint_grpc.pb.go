// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: documents/endpoint.proto

package documents

import (
	context "context"
	idl_common "github.com/krafton-hq/red-fox/apis/idl_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndpointServerClient is the client API for EndpointServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointServerClient interface {
	GetEndpoint(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetEndpointRes, error)
	ListEndpoints(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListEndpointsRes, error)
	CreateEndpoint(ctx context.Context, in *DesiredEndpointReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	UpdateEndpoint(ctx context.Context, in *DesiredEndpointReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	DeleteEndpoint(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
}

type endpointServerClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointServerClient(cc grpc.ClientConnInterface) EndpointServerClient {
	return &endpointServerClient{cc}
}

func (c *endpointServerClient) GetEndpoint(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetEndpointRes, error) {
	out := new(GetEndpointRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.EndpointServer/GetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServerClient) ListEndpoints(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListEndpointsRes, error) {
	out := new(ListEndpointsRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.EndpointServer/ListEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServerClient) CreateEndpoint(ctx context.Context, in *DesiredEndpointReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.EndpointServer/CreateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServerClient) UpdateEndpoint(ctx context.Context, in *DesiredEndpointReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.EndpointServer/UpdateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServerClient) DeleteEndpoint(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.EndpointServer/DeleteEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServerServer is the server API for EndpointServer service.
// All implementations must embed UnimplementedEndpointServerServer
// for forward compatibility
type EndpointServerServer interface {
	GetEndpoint(context.Context, *idl_common.SingleObjectReq) (*GetEndpointRes, error)
	ListEndpoints(context.Context, *idl_common.ListObjectReq) (*ListEndpointsRes, error)
	CreateEndpoint(context.Context, *DesiredEndpointReq) (*idl_common.CommonRes, error)
	UpdateEndpoint(context.Context, *DesiredEndpointReq) (*idl_common.CommonRes, error)
	DeleteEndpoint(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error)
	mustEmbedUnimplementedEndpointServerServer()
}

// UnimplementedEndpointServerServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointServerServer struct {
}

func (UnimplementedEndpointServerServer) GetEndpoint(context.Context, *idl_common.SingleObjectReq) (*GetEndpointRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoint not implemented")
}
func (UnimplementedEndpointServerServer) ListEndpoints(context.Context, *idl_common.ListObjectReq) (*ListEndpointsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpoints not implemented")
}
func (UnimplementedEndpointServerServer) CreateEndpoint(context.Context, *DesiredEndpointReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoint not implemented")
}
func (UnimplementedEndpointServerServer) UpdateEndpoint(context.Context, *DesiredEndpointReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpoint not implemented")
}
func (UnimplementedEndpointServerServer) DeleteEndpoint(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpoint not implemented")
}
func (UnimplementedEndpointServerServer) mustEmbedUnimplementedEndpointServerServer() {}

// UnsafeEndpointServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServerServer will
// result in compilation errors.
type UnsafeEndpointServerServer interface {
	mustEmbedUnimplementedEndpointServerServer()
}

func RegisterEndpointServerServer(s grpc.ServiceRegistrar, srv EndpointServerServer) {
	s.RegisterService(&EndpointServer_ServiceDesc, srv)
}

func _EndpointServer_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServerServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.EndpointServer/GetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServerServer).GetEndpoint(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointServer_ListEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.ListObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServerServer).ListEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.EndpointServer/ListEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServerServer).ListEndpoints(ctx, req.(*idl_common.ListObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointServer_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredEndpointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServerServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.EndpointServer/CreateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServerServer).CreateEndpoint(ctx, req.(*DesiredEndpointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointServer_UpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredEndpointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServerServer).UpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.EndpointServer/UpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServerServer).UpdateEndpoint(ctx, req.(*DesiredEndpointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointServer_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServerServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.EndpointServer/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServerServer).DeleteEndpoint(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EndpointServer_ServiceDesc is the grpc.ServiceDesc for EndpointServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redfox.api.documents.EndpointServer",
	HandlerType: (*EndpointServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEndpoint",
			Handler:    _EndpointServer_GetEndpoint_Handler,
		},
		{
			MethodName: "ListEndpoints",
			Handler:    _EndpointServer_ListEndpoints_Handler,
		},
		{
			MethodName: "CreateEndpoint",
			Handler:    _EndpointServer_CreateEndpoint_Handler,
		},
		{
			MethodName: "UpdateEndpoint",
			Handler:    _EndpointServer_UpdateEndpoint_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _EndpointServer_DeleteEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/endpoint.proto",
}
