// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: documents/natip.proto

package documents

import (
	context "context"
	idl_common "github.com/krafton-hq/red-fox/apis/idl_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NatIpServerClient is the client API for NatIpServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NatIpServerClient interface {
	GetNatIp(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetNatIpRes, error)
	ListNatIps(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListNatIpsRes, error)
	CreateNatIp(ctx context.Context, in *DesiredNatIpReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	UpdateNatIp(ctx context.Context, in *DesiredNatIpReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	DeleteNatIp(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
}

type natIpServerClient struct {
	cc grpc.ClientConnInterface
}

func NewNatIpServerClient(cc grpc.ClientConnInterface) NatIpServerClient {
	return &natIpServerClient{cc}
}

func (c *natIpServerClient) GetNatIp(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetNatIpRes, error) {
	out := new(GetNatIpRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.NatIpServer/GetNatIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natIpServerClient) ListNatIps(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListNatIpsRes, error) {
	out := new(ListNatIpsRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.NatIpServer/ListNatIps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natIpServerClient) CreateNatIp(ctx context.Context, in *DesiredNatIpReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.NatIpServer/CreateNatIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natIpServerClient) UpdateNatIp(ctx context.Context, in *DesiredNatIpReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.NatIpServer/UpdateNatIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natIpServerClient) DeleteNatIp(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.documents.NatIpServer/DeleteNatIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatIpServerServer is the server API for NatIpServer service.
// All implementations must embed UnimplementedNatIpServerServer
// for forward compatibility
type NatIpServerServer interface {
	GetNatIp(context.Context, *idl_common.SingleObjectReq) (*GetNatIpRes, error)
	ListNatIps(context.Context, *idl_common.ListObjectReq) (*ListNatIpsRes, error)
	CreateNatIp(context.Context, *DesiredNatIpReq) (*idl_common.CommonRes, error)
	UpdateNatIp(context.Context, *DesiredNatIpReq) (*idl_common.CommonRes, error)
	DeleteNatIp(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error)
	mustEmbedUnimplementedNatIpServerServer()
}

// UnimplementedNatIpServerServer must be embedded to have forward compatible implementations.
type UnimplementedNatIpServerServer struct {
}

func (UnimplementedNatIpServerServer) GetNatIp(context.Context, *idl_common.SingleObjectReq) (*GetNatIpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNatIp not implemented")
}
func (UnimplementedNatIpServerServer) ListNatIps(context.Context, *idl_common.ListObjectReq) (*ListNatIpsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNatIps not implemented")
}
func (UnimplementedNatIpServerServer) CreateNatIp(context.Context, *DesiredNatIpReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNatIp not implemented")
}
func (UnimplementedNatIpServerServer) UpdateNatIp(context.Context, *DesiredNatIpReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNatIp not implemented")
}
func (UnimplementedNatIpServerServer) DeleteNatIp(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNatIp not implemented")
}
func (UnimplementedNatIpServerServer) mustEmbedUnimplementedNatIpServerServer() {}

// UnsafeNatIpServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatIpServerServer will
// result in compilation errors.
type UnsafeNatIpServerServer interface {
	mustEmbedUnimplementedNatIpServerServer()
}

func RegisterNatIpServerServer(s grpc.ServiceRegistrar, srv NatIpServerServer) {
	s.RegisterService(&NatIpServer_ServiceDesc, srv)
}

func _NatIpServer_GetNatIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatIpServerServer).GetNatIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.NatIpServer/GetNatIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatIpServerServer).GetNatIp(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatIpServer_ListNatIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.ListObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatIpServerServer).ListNatIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.NatIpServer/ListNatIps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatIpServerServer).ListNatIps(ctx, req.(*idl_common.ListObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatIpServer_CreateNatIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredNatIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatIpServerServer).CreateNatIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.NatIpServer/CreateNatIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatIpServerServer).CreateNatIp(ctx, req.(*DesiredNatIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatIpServer_UpdateNatIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredNatIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatIpServerServer).UpdateNatIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.NatIpServer/UpdateNatIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatIpServerServer).UpdateNatIp(ctx, req.(*DesiredNatIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatIpServer_DeleteNatIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatIpServerServer).DeleteNatIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.documents.NatIpServer/DeleteNatIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatIpServerServer).DeleteNatIp(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NatIpServer_ServiceDesc is the grpc.ServiceDesc for NatIpServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatIpServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redfox.api.documents.NatIpServer",
	HandlerType: (*NatIpServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNatIp",
			Handler:    _NatIpServer_GetNatIp_Handler,
		},
		{
			MethodName: "ListNatIps",
			Handler:    _NatIpServer_ListNatIps_Handler,
		},
		{
			MethodName: "CreateNatIp",
			Handler:    _NatIpServer_CreateNatIp_Handler,
		},
		{
			MethodName: "UpdateNatIp",
			Handler:    _NatIpServer_UpdateNatIp_Handler,
		},
		{
			MethodName: "DeleteNatIp",
			Handler:    _NatIpServer_DeleteNatIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/natip.proto",
}
