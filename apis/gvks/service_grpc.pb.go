// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: gvks/service.proto

package gvks

import (
	context "context"
	idl_common "github.com/krafton-hq/red-fox/apis/idl_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupVersionKindServerClient is the client API for GroupVersionKindServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupVersionKindServerClient interface {
	GetGroupVersionKind(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetGroupVersionKindRes, error)
	ListGroupVersionKinds(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListGroupVersionKindsRes, error)
	CreateGroupVersionKind(ctx context.Context, in *CreateGroupVersionKindReq, opts ...grpc.CallOption) (*CreateGroupVersionKindRes, error)
	DeleteGroupVersionKind(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
}

type groupVersionKindServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupVersionKindServerClient(cc grpc.ClientConnInterface) GroupVersionKindServerClient {
	return &groupVersionKindServerClient{cc}
}

func (c *groupVersionKindServerClient) GetGroupVersionKind(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*GetGroupVersionKindRes, error) {
	out := new(GetGroupVersionKindRes)
	err := c.cc.Invoke(ctx, "/redfox.api.gvks.GroupVersionKindServer/GetGroupVersionKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupVersionKindServerClient) ListGroupVersionKinds(ctx context.Context, in *idl_common.ListObjectReq, opts ...grpc.CallOption) (*ListGroupVersionKindsRes, error) {
	out := new(ListGroupVersionKindsRes)
	err := c.cc.Invoke(ctx, "/redfox.api.gvks.GroupVersionKindServer/ListGroupVersionKinds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupVersionKindServerClient) CreateGroupVersionKind(ctx context.Context, in *CreateGroupVersionKindReq, opts ...grpc.CallOption) (*CreateGroupVersionKindRes, error) {
	out := new(CreateGroupVersionKindRes)
	err := c.cc.Invoke(ctx, "/redfox.api.gvks.GroupVersionKindServer/CreateGroupVersionKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupVersionKindServerClient) DeleteGroupVersionKind(ctx context.Context, in *idl_common.SingleObjectReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.gvks.GroupVersionKindServer/DeleteGroupVersionKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupVersionKindServerServer is the server API for GroupVersionKindServer service.
// All implementations must embed UnimplementedGroupVersionKindServerServer
// for forward compatibility
type GroupVersionKindServerServer interface {
	GetGroupVersionKind(context.Context, *idl_common.SingleObjectReq) (*GetGroupVersionKindRes, error)
	ListGroupVersionKinds(context.Context, *idl_common.ListObjectReq) (*ListGroupVersionKindsRes, error)
	CreateGroupVersionKind(context.Context, *CreateGroupVersionKindReq) (*CreateGroupVersionKindRes, error)
	DeleteGroupVersionKind(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error)
	mustEmbedUnimplementedGroupVersionKindServerServer()
}

// UnimplementedGroupVersionKindServerServer must be embedded to have forward compatible implementations.
type UnimplementedGroupVersionKindServerServer struct {
}

func (UnimplementedGroupVersionKindServerServer) GetGroupVersionKind(context.Context, *idl_common.SingleObjectReq) (*GetGroupVersionKindRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupVersionKind not implemented")
}
func (UnimplementedGroupVersionKindServerServer) ListGroupVersionKinds(context.Context, *idl_common.ListObjectReq) (*ListGroupVersionKindsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupVersionKinds not implemented")
}
func (UnimplementedGroupVersionKindServerServer) CreateGroupVersionKind(context.Context, *CreateGroupVersionKindReq) (*CreateGroupVersionKindRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupVersionKind not implemented")
}
func (UnimplementedGroupVersionKindServerServer) DeleteGroupVersionKind(context.Context, *idl_common.SingleObjectReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupVersionKind not implemented")
}
func (UnimplementedGroupVersionKindServerServer) mustEmbedUnimplementedGroupVersionKindServerServer() {
}

// UnsafeGroupVersionKindServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupVersionKindServerServer will
// result in compilation errors.
type UnsafeGroupVersionKindServerServer interface {
	mustEmbedUnimplementedGroupVersionKindServerServer()
}

func RegisterGroupVersionKindServerServer(s grpc.ServiceRegistrar, srv GroupVersionKindServerServer) {
	s.RegisterService(&GroupVersionKindServer_ServiceDesc, srv)
}

func _GroupVersionKindServer_GetGroupVersionKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupVersionKindServerServer).GetGroupVersionKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.gvks.GroupVersionKindServer/GetGroupVersionKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupVersionKindServerServer).GetGroupVersionKind(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupVersionKindServer_ListGroupVersionKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.ListObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupVersionKindServerServer).ListGroupVersionKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.gvks.GroupVersionKindServer/ListGroupVersionKinds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupVersionKindServerServer).ListGroupVersionKinds(ctx, req.(*idl_common.ListObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupVersionKindServer_CreateGroupVersionKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupVersionKindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupVersionKindServerServer).CreateGroupVersionKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.gvks.GroupVersionKindServer/CreateGroupVersionKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupVersionKindServerServer).CreateGroupVersionKind(ctx, req.(*CreateGroupVersionKindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupVersionKindServer_DeleteGroupVersionKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.SingleObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupVersionKindServerServer).DeleteGroupVersionKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.gvks.GroupVersionKindServer/DeleteGroupVersionKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupVersionKindServerServer).DeleteGroupVersionKind(ctx, req.(*idl_common.SingleObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupVersionKindServer_ServiceDesc is the grpc.ServiceDesc for GroupVersionKindServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupVersionKindServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redfox.api.gvks.GroupVersionKindServer",
	HandlerType: (*GroupVersionKindServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupVersionKind",
			Handler:    _GroupVersionKindServer_GetGroupVersionKind_Handler,
		},
		{
			MethodName: "ListGroupVersionKinds",
			Handler:    _GroupVersionKindServer_ListGroupVersionKinds_Handler,
		},
		{
			MethodName: "CreateGroupVersionKind",
			Handler:    _GroupVersionKindServer_CreateGroupVersionKind_Handler,
		},
		{
			MethodName: "DeleteGroupVersionKind",
			Handler:    _GroupVersionKindServer_DeleteGroupVersionKind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gvks/service.proto",
}
