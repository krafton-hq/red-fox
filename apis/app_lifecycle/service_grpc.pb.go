// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: app_lifecycle/service.proto

package app_lifecycle

import (
	context "context"
	idl_common "github.com/krafton-hq/red-fox/apis/idl_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationLifecycleClient is the client API for ApplicationLifecycle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationLifecycleClient interface {
	Version(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	Livez(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
	Readyz(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error)
}

type applicationLifecycleClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationLifecycleClient(cc grpc.ClientConnInterface) ApplicationLifecycleClient {
	return &applicationLifecycleClient{cc}
}

func (c *applicationLifecycleClient) Version(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.app_lifecycle.ApplicationLifecycle/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationLifecycleClient) Livez(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.app_lifecycle.ApplicationLifecycle/Livez", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationLifecycleClient) Readyz(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*idl_common.CommonRes, error) {
	out := new(idl_common.CommonRes)
	err := c.cc.Invoke(ctx, "/redfox.api.app_lifecycle.ApplicationLifecycle/Readyz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationLifecycleServer is the server API for ApplicationLifecycle service.
// All implementations must embed UnimplementedApplicationLifecycleServer
// for forward compatibility
type ApplicationLifecycleServer interface {
	Version(context.Context, *idl_common.CommonReq) (*idl_common.CommonRes, error)
	Livez(context.Context, *idl_common.CommonReq) (*idl_common.CommonRes, error)
	Readyz(context.Context, *idl_common.CommonReq) (*idl_common.CommonRes, error)
	mustEmbedUnimplementedApplicationLifecycleServer()
}

// UnimplementedApplicationLifecycleServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationLifecycleServer struct {
}

func (UnimplementedApplicationLifecycleServer) Version(context.Context, *idl_common.CommonReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedApplicationLifecycleServer) Livez(context.Context, *idl_common.CommonReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Livez not implemented")
}
func (UnimplementedApplicationLifecycleServer) Readyz(context.Context, *idl_common.CommonReq) (*idl_common.CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readyz not implemented")
}
func (UnimplementedApplicationLifecycleServer) mustEmbedUnimplementedApplicationLifecycleServer() {}

// UnsafeApplicationLifecycleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationLifecycleServer will
// result in compilation errors.
type UnsafeApplicationLifecycleServer interface {
	mustEmbedUnimplementedApplicationLifecycleServer()
}

func RegisterApplicationLifecycleServer(s grpc.ServiceRegistrar, srv ApplicationLifecycleServer) {
	s.RegisterService(&ApplicationLifecycle_ServiceDesc, srv)
}

func _ApplicationLifecycle_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationLifecycleServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.app_lifecycle.ApplicationLifecycle/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationLifecycleServer).Version(ctx, req.(*idl_common.CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationLifecycle_Livez_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationLifecycleServer).Livez(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.app_lifecycle.ApplicationLifecycle/Livez",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationLifecycleServer).Livez(ctx, req.(*idl_common.CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationLifecycle_Readyz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationLifecycleServer).Readyz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.app_lifecycle.ApplicationLifecycle/Readyz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationLifecycleServer).Readyz(ctx, req.(*idl_common.CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationLifecycle_ServiceDesc is the grpc.ServiceDesc for ApplicationLifecycle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationLifecycle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redfox.api.app_lifecycle.ApplicationLifecycle",
	HandlerType: (*ApplicationLifecycleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ApplicationLifecycle_Version_Handler,
		},
		{
			MethodName: "Livez",
			Handler:    _ApplicationLifecycle_Livez_Handler,
		},
		{
			MethodName: "Readyz",
			Handler:    _ApplicationLifecycle_Readyz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_lifecycle/service.proto",
}
