// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api_resources/resources.proto

package api_resources

import (
	context "context"
	idl_common "github.com/krafton-hq/red-fox/apis/idl_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiResourcesServerClient is the client API for ApiResourcesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiResourcesServerClient interface {
	ListApiResources(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*ListApiResourcesRes, error)
}

type apiResourcesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewApiResourcesServerClient(cc grpc.ClientConnInterface) ApiResourcesServerClient {
	return &apiResourcesServerClient{cc}
}

func (c *apiResourcesServerClient) ListApiResources(ctx context.Context, in *idl_common.CommonReq, opts ...grpc.CallOption) (*ListApiResourcesRes, error) {
	out := new(ListApiResourcesRes)
	err := c.cc.Invoke(ctx, "/redfox.api.api_resources.ApiResourcesServer/ListApiResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiResourcesServerServer is the server API for ApiResourcesServer service.
// All implementations must embed UnimplementedApiResourcesServerServer
// for forward compatibility
type ApiResourcesServerServer interface {
	ListApiResources(context.Context, *idl_common.CommonReq) (*ListApiResourcesRes, error)
	mustEmbedUnimplementedApiResourcesServerServer()
}

// UnimplementedApiResourcesServerServer must be embedded to have forward compatible implementations.
type UnimplementedApiResourcesServerServer struct {
}

func (UnimplementedApiResourcesServerServer) ListApiResources(context.Context, *idl_common.CommonReq) (*ListApiResourcesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiResources not implemented")
}
func (UnimplementedApiResourcesServerServer) mustEmbedUnimplementedApiResourcesServerServer() {}

// UnsafeApiResourcesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiResourcesServerServer will
// result in compilation errors.
type UnsafeApiResourcesServerServer interface {
	mustEmbedUnimplementedApiResourcesServerServer()
}

func RegisterApiResourcesServerServer(s grpc.ServiceRegistrar, srv ApiResourcesServerServer) {
	s.RegisterService(&ApiResourcesServer_ServiceDesc, srv)
}

func _ApiResourcesServer_ListApiResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(idl_common.CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiResourcesServerServer).ListApiResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redfox.api.api_resources.ApiResourcesServer/ListApiResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiResourcesServerServer).ListApiResources(ctx, req.(*idl_common.CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiResourcesServer_ServiceDesc is the grpc.ServiceDesc for ApiResourcesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiResourcesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redfox.api.api_resources.ApiResourcesServer",
	HandlerType: (*ApiResourcesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApiResources",
			Handler:    _ApiResourcesServer_ListApiResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_resources/resources.proto",
}
